---
import { getImage } from "astro:assets";
import { OG, SEO, SITE } from "@data/constants";
import faviconSvgSrc from "@images/branding/icon.svg";
// import faviconSrc from "@images/branding/icon.png";
import maskableIconSrc from "@images/branding/icon-maskable.png";
import maskableIconSvgSrc from "@images/branding/icon-maskable.svg";

interface Props {
  customDescription?: string;
  meta?: string;
  structuredData?: object;
  customOgTitle?: string | null;
  customOgDescription?: string | null;
  customOgImage?: ImageMetadata | null;
}

const {
  meta = SITE.description,
  structuredData = SEO.structuredData,
  customOgTitle = null,
  customOgDescription = null,
  customOgImage = null,
} = Astro.props;

// Use custom description if provided, otherwise use default meta
const description = meta || customOgDescription;
// Use custom OG title if provided, otherwise use default OG title
const ogTitle = customOgTitle || OG.title;
const ogDescription = customOgDescription || OG.description || meta;
const imageSource = customOgImage || OG.image;

// Define the metadata for your website and individual pages
const URL = `${Astro.site}`; // Set the website URL in astro.config.mjs
const author = SITE.author;
// const canonical = Astro.url.href;
const canonicalURL = Astro.url.origin + Astro.url.pathname;
const basePath = Astro.url.pathname;

const socialImageRes = await getImage({
  src: imageSource,
  width: 1200,
  height: 600,
  fit: "cover",
});

const socialImage = Astro.url.origin + socialImageRes.src; // Get the full URL of the image (https://stackoverflow.com/a/9858694)

const languages: { [key: string]: string } = {
  "zh-Hant": "/",
};

function createHref(lang: string, prefix: string, path: string): string {
  // Remove any existing language prefix
  const cleanPath = path.replace(/^\/(fr|en)\//, "/");

  // Add the correct language prefix if needed
  const basePath = prefix ? `/${prefix}${cleanPath}` : cleanPath;
  const normalizedBasePath = basePath.replace(/\/\/+/g, "/");

  return `${URL.slice(0, -1)}${normalizedBasePath}`;
}

const fullPath: string = Astro.url.pathname;

const alternateLanguageLinks: string = Object.entries(languages)
  .map(([lang, prefix]: [string, string]) => {
    const cleanPath = fullPath.replace(/^\/(fr|en)\//, "/");
    const href: string = createHref(lang, prefix, cleanPath);

    return `<link rel="alternate" hreflang="${lang}" href="${href}" />`;
  })
  .join("\n");

// Generate and optimize the favicon images
const maskableIconSvg = await getImage({
  src: maskableIconSvgSrc,
  format: "svg",
});

const faviconSvg = await getImage({
  src: faviconSvgSrc,
  format: "svg",
});

const appleTouchIcon = await getImage({
  src: maskableIconSrc,
  width: 180,
  height: 180,
  format: "png",
});

const maskableIcon = await getImage({
  src: maskableIconSrc,
  width: 144,
  height: 144,
  format: "png",
});
---

{
  /*  Inject structured data into the page if provided. This data is formatted as JSON-LD, a method recommended by Google for structured data pass:
     https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data */
}{
  structuredData && (
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />
  )
}
{/* Define the character set, description, author, and viewport settings */}
<meta charset="utf-8" />

<meta name="description" content={description} />

<meta name="web_author" content={author} />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0"
/>
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="canonical" href={canonicalURL} />
<Fragment set:html={alternateLanguageLinks} />

{/* Facebook Meta Tags */}
<meta property="og:locale" content="zh_TW" />
<meta property="og:url" content={URL} />
<meta property="og:type" content="website" />
<meta property="og:title" content={ogTitle} />
<meta property="og:site_name" content={ogTitle} />
<meta property="og:description" content={ogDescription} />
<meta property="og:image" content={socialImage} />
<meta content="1200" property="og:image:width" />
<meta content="600" property="og:image:height" />
<meta content="image/png" property="og:image:type" />

{/* Twitter Meta Tags */}
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:domain" content={URL} />
<meta property="twitter:url" content={URL} />
<meta name="twitter:title" content={ogTitle} />
<meta name="twitter:description" content={ogDescription} />
<meta name="twitter:image" content={socialImage} />

{/* Links to the webmanifest and sitemap */}
<link rel="manifest" href="/manifest.json" />
{/* https://docs.astro.build/en/guides/integrations-guide/sitemap/ */}
<link rel="sitemap" href="/sitemap-index.xml" />
{/* Links for favicons */}

<link href="/favicon-32.png" rel="icon" sizes="32x32" type="image/png" />
<link href="/favicon.ico" rel="icon" sizes="any" type="image/x-icon" />

<link href={maskableIcon.src} rel="icon" sizes="144x144" type="image/png" />
<!-- <link href={maskableIconSvg.src} rel="icon" type="image/svg+xml" sizes="any" /> -->
<link href={appleTouchIcon.src} rel="apple-touch-icon" />
<link href={appleTouchIcon.src} rel="shortcut icon" />
<link rel="apple-touch-icon" href={socialImage} />

<meta name="mobile-web-app-capable" content="yes" />
<meta name="theme-color" content="#c0c2d1" />

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Noto+Sans+TC:wght@100..900&display=swap"
  rel="stylesheet"
/>

<meta
  name="google-site-verification"
  content="hkysiqX-KKxrqbBumyx8EiEtvDKafzo6X9f4jJDsF_Q"
/>
