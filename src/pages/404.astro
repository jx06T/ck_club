---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { House, List } from "lucide-react";

const allClubs = await getCollection("clubs");
const sampleClubs = allClubs
  .sort(() => Math.random() - 0.5)
  .slice(0, 7);
---

<Layout title="404 | CKClubHub" padding={false}>
  <div class=" -mb-20">
    <div
      class="w-full h-[max(80vh,28rem)] bg-transparent relative overflow-hidden"
    >
      <div
        id="fallenContent"
        class="absolute inset-0 border-b border-accent-600"
      >
      </div>

      <div
        id="box-container"
        class="z-10 h-[max(160vh,56rem)] aspect-square origin-bottom absolute bottom-0 left-[calc(50vw-max(80vh,28rem))]"
      >
        <div
          id="box-div"
          class="absolute -bottom-16 -left-24 z-50 origin-center"
        >
          <div
            class="w-48 h-32 relative transform-style-3d bg-gradient-to-t from-primary-300 to-primary-50 border-1 border-t-0 border-primary-300 shadow-xl rounded-t-sm rounded-b-2xl"
          >
          </div>
        </div>
      </div>

      <div
        id="finalMessage"
        class="absolute inset-0 z-10 flex flex-col items-center justify-start pt-12 md:pt-28 text-center p-4 opacity-0 transition-opacity transform duration-700 ease-out pointer-events-none"
      >
        <div class="text-neutral-800 mb-10 text-shadow">
          <h2 class="text-4xl md:text-5xl font-bold mb-4">
            哎呀！我們找不到你在尋找的頁面
          </h2>
          <p class="text-lg md:text-xl text-neutral-700 max-w-md">
            試著檢查網址拼寫，或是在社團資料庫重新搜尋
          </p>
        </div>
        <div class="flex flex-wrap justify-center gap-6">
          <a
            href="/"
            class="bg-accent-400 inline-flex items-center justify-center gap-2 rounded-full px-7 py-3 text-base transition-transform hover:scale-[1.02] hover:-translate-y-0.5"
          >
            <House size={20} />
            回到首頁
          </a>
          <a
            href="/clubs"
            class="bg-primary-300 inline-flex items-center justify-center gap-2 rounded-full px-7 py-3 text-base transition-transform hover:scale-[1.02] hover:-translate-y-0.5"
          >
            <List size={20} />
            瀏覽所有社團
          </a>
        </div>
      </div>
    </div>
  </div>

  <script
    define:vars={{
      sampleClubs: sampleClubs.map((c) => ({
        name: c.data.name,
        summary: c.data.summary,
        slug: c.slug,
      })),
    }}
  >
    const delay = (ms) => new Promise((res) => setTimeout(res, ms));
    const random = (min, max) => Math.random() * (max - min) + min;

    const createFallenElement = (options) => {
      const el = document.createElement("a");
      el.className = options.className;
      el.innerHTML = options.htmlContent;
      el.href = options.url;

      Object.assign(el.style, {
        position: "absolute",
        left: `${options.startX}px`,
        top: `${options.startY}px`,
        transform: `scale(0.5) rotate(${random(-180, 180)}deg)`,
        opacity: "0",
        transition: `transform 1.5s cubic-bezier(0.3, 0.5, 0.4, 1.1), opacity 0.5s`,
        willChange: "transform, opacity",
      });

      return el;
    };

    const initAnimation = async () => {
      const boxContainer = document.getElementById("box-container");
      const boxDiv = document.getElementById("box-div");
      const fallenContent = document.getElementById("fallenContent");
      const finalMessage = document.getElementById("finalMessage");

      if (!boxContainer || !boxDiv || !fallenContent || !finalMessage) return;

      const fallenPieceClasses =
        "flex flex-col gap-1 w-56 p-3 rounded-lg bg-neutral-50 text-neutral-900 shadow-lg hover:bg-neutral-100 pointer-events-auto";
      const fallenDigitClasses =
        "inline-block px-5 py-2 rounded-lg bg-neutral-50 text-accent-500 text-6xl font-black shadow-lg hover:bg-neutral-100 pointer-events-auto";

      await delay(500);
      boxContainer.classList.add("flipped");
      boxDiv.classList.add("flipped");
      await delay(1600);

      const boxRect = fallenContent.getBoundingClientRect();
      const startX = (boxRect.top + boxRect.right) / 2 - 100;
      const startY = boxRect.top + 100;

      const allElementsToFall = [];
      sampleClubs.forEach((club) => {
        allElementsToFall.push({
          type: "card",
          el: createFallenElement({
            className: fallenPieceClasses,
            htmlContent: `<h3 class="font-bold text-base text-neutral-950">${club.name}</h3><p class="text-xs text-neutral-600 leading-snug">${club.summary.slice(0, 50)}...</p>`,
            startX,
            startY,
            url: "/clubs/" + club.slug,
          }),
        });
      });

      ["4", "0", "4"].forEach((digit, i) => {
        allElementsToFall.push({
          type: "digit",
          id: i,
          el: createFallenElement({
            className: fallenDigitClasses,
            htmlContent: digit,
            startX,
            startY,
            url: "/404" ,
          }),
        });
      });

      const cards = allElementsToFall
        .filter((item) => item.type === "card")
        .sort(() => Math.random() - 0.5);
      const digits = allElementsToFall.filter((item) => item.type === "digit");
      const finalFallOrder = [...cards, ...digits];

      for (const { id, el, type } of finalFallOrder) {
        fallenContent.appendChild(el);
        await delay(10);

        const groundY = boxRect.height * 0.5 + 185;
        const endX =
          type === "digit"
            ? random(
                window.innerWidth / 2 -
                  100 +
                  (id - 1) * window.innerWidth * 0.3,
                window.innerWidth / 2 + (id - 1) * window.innerWidth * 0.3
              )
            : random(
                window.innerWidth * 0.1,
                window.innerWidth * 0.9 - el.offsetWidth
              );
        const endRotation = random(-45, 45);
        const endScale =
          type === "digit"
            ? `scale(${1.3 + window.innerWidth / 1000})`
            : "scale(1)";

        el.style.opacity = "1";
        el.style.transform = `translate(${endX - startX}px, ${groundY - startY}px) rotate(${endRotation}deg) ${endScale}`;

        await delay(random(50, 100));
      }

      await delay(1500);
      finalMessage.style.opacity = "1";
      finalMessage.style.transform = "scale(1)";
      finalMessage.style.pointerEvents = "auto";
      fallenContent.style.pointerEvents = "none";
      fallenContent.style.zIndex = 40;
    };

    document.addEventListener("DOMContentLoaded", initAnimation);
  </script>
</Layout>

<style>
  #box-div.flipped {
    animation: shakeAndDump 4s ease-in-out forwards;
  }

  @keyframes shakeAndDump {
    0% {
      transform: rotate(0deg);
    }

    40% {
      transform: translateY(-16px) translateX(6px) rotate(87deg);
    }
    42% {
      transform: translateY(-32px) translateX(0) rotate(92deg);
    }
    44% {
      transform: translateY(-16px) translateX(-6px) rotate(88deg);
    }
    46% {
      transform: translateY(0) translateX(0) rotate(95deg);
    }

    48% {
      transform: translateY(16px) translateX(8px) rotate(85deg);
    }
    50% {
      transform: translateY(32px) translateX(0px) rotate(94deg);
    }
    52% {
      transform: translateY(16px) translateX(-8px) rotate(86deg);
    }

    54% {
      transform: translateY(0px) translateX(0px) rotate(98deg);
    }
    56% {
      transform: translateY(-16px) translateX(16px) rotate(82deg);
    }
    58% {
      transform: translateY(-32px) translateX(0px) rotate(96deg);
    }
    60% {
      transform: translateY(-16px) translateX(-16px) rotate(84deg);
      opacity: 100;
    }
    80% {
      opacity: 100;
    }
    100% {
      transform: rotate(180deg);
      opacity: 0;
    }
  }

  #box-container {
    transform: translateY(-4rem);
  }

  #box-container.flipped {
    animation: rotateRotate 4s ease-in-out forwards;
  }

  @keyframes rotateRotate {
    0% {
      transform: rotate(0deg) scale(1) translateY(-4rem);
    }

    40% {
      transform: rotate(85deg) scale(1.07) translateX(11rem);
    }

    50% {
      transform: rotate(90deg) scale(1.1) translateX(12rem);
    }

    60% {
      transform: rotate(95deg) scale(1.07) translateX(11rem);
    }

    100% {
      transform: rotate(180deg) scale(1) translateY(4rem);
    }
  }
</style>
