---
import Layout from "../../layouts/Layout.astro";
import { auth, db } from "../../firebase/server";

export const prerender = false;

type StringCountMap = {
  [key: string]: number;
};

type FeedbackResponse = {
  submittedAt: { seconds: number; nanoseconds: number };
  school: string;
  grade: string;
  gender: string;
  attendedFair: string;
  attendedExhibition: string;
  exhibitionSource: string;
  source: string;
};

const tableHeaders = [
  { key: "submittedAt", label: "提交時間" },
  { key: "school", label: "學校" },
  { key: "grade", label: "年級" },
  { key: "gender", label: "性別" },
  { key: "attendedFair", label: "參加社博" },
  { key: "attendedExhibition", label: "參加社聯" },
  { key: "exhibitionSource", label: "如何得知社聯" },
  { key: "source", label: "如何得知此網站" },
];

let isAuthorized = false;
let user = null;

const sessionCookie = Astro.cookies.get("__session")?.value;

if (sessionCookie) {
  try {
    const decodedToken = await auth.verifySessionCookie(sessionCookie, true);
    user = { uid: decodedToken.uid, email: decodedToken.email };

    // 檢查這個 uid 是否在我們的 `admins` 集合中
    const adminRef = db.collection("admins").doc(user.uid);
    const adminDoc = await adminRef.get();

    if (adminDoc.exists) {
      isAuthorized = true;
    }
  } catch (error) {
    console.warn("Admin access attempt with invalid session cookie.");
  }
}

if (!isAuthorized) {
  return new Response(null, { status: 404 });
}

const surveyResponsesSnapshot = await db.collection("surveyResponses").get();
const responses = surveyResponsesSnapshot.docs.map(
  (doc) => doc.data() as FeedbackResponse
);
const totalResponses = responses.length;

const schoolCounts = responses.reduce((acc: StringCountMap, res) => {
  const school = res.school || "未填寫";
  acc[school] = (acc[school] || 0) + 1;
  return acc;
}, {});

const gradeCounts = responses.reduce((acc: StringCountMap, res) => {
  const grade = res.grade || "未填寫";
  acc[grade] = (acc[grade] || 0) + 1;
  return acc;
}, {});

// ... 其他統計數據的計算 ...
---

<Layout title="問卷結果儀表板" padding={false}>
  <div class="container mx-auto p-8 -mt-12">
    <h1 class="text-3xl font-bold mb-6">問卷結果</h1>
    <p class="mb-8 text-lg">
      總共收到 <span class="font-bold text-accent-500">{totalResponses}</span> 份回覆
    </p>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div class="bg-primary-50 p-6 rounded-lg">
        <h2 class="text-xl font-semibold mb-4">學校分佈</h2>
        <ul>
          {
            Object.entries(schoolCounts).map(([school, count]) => (
              <li class="flex justify-between py-1">
                <span>{school}</span>
                <span class="font-mono">{count}</span>
              </li>
            ))
          }
        </ul>
      </div>

      <div class="bg-primary-50 p-6 rounded-lg">
        <h2 class="text-xl font-semibold mb-4">年級分佈</h2>
        <ul>
          {
            Object.entries(gradeCounts).map(([grade, count]) => (
              <li class="flex justify-between py-1">
                <span>{grade}</span>
                <span class="font-mono">{count}</span>
              </li>
            ))
          }
        </ul>
      </div>
    </div>

    <h2 class="text-2xl font-bold mt-12 mb-4">原始數據</h2>
    <div
      class="w-full overflow-x-auto bg-primary-50 rounded-lg no-scrollbar"
      id="sheet-div"
    >
      <table class="w-full text-sm text-left text-primary-700">
        <thead
          class="text-base text-primary-800 uppercase bg-primary-50 sticky top-0 border-b border-accent-500"
        >
          <tr>
            {
              tableHeaders.map((header) => (
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  {header.label}
                </th>
              ))
            }
          </tr>
        </thead>
        <tbody>
          {
            responses.map((response, index) => (
              <tr
                class={`bg-primary-50 not-last:border-b border-neutral-100 hover:bg-pritext-primary-50 ${index % 2 === 0 ? "" : "bg-primary-100/20"}`}
              >
                {tableHeaders.map((header) => {
                  const key = header.key as keyof FeedbackResponse;
                  return (
                    <td class="px-6 py-4 whitespace-nowrap">
                      {key === "submittedAt" && response[key]
                        ? new Date(
                            response[key].seconds * 1000
                          ).toLocaleString("zh-TW", {
                            year: "numeric",
                            month: "2-digit",
                            day: "2-digit",
                            hour: "2-digit",
                            minute: "2-digit",
                          })
                        : response[key] || "N/A"}
                    </td>
                  );
                })}
              </tr>
            ))
          }
          {
            responses.length === 0 && (
              <tr>
                <td
                  colspan={tableHeaders.length}
                  class="text-center py-8 text-primary-800"
                >
                  目前沒有任何問卷回覆。
                </td>
              </tr>
            )
          }
        </tbody>
      </table>
    </div>
  </div>
</Layout>

<script>
  const scrollContainer = document.getElementById("sheet-div");

  if (scrollContainer) {
    scrollContainer.addEventListener("wheel", (event: WheelEvent) => {
      if (event.deltaY !== 0 && !event.shiftKey) {
        event.stopPropagation();
        event.preventDefault();
        scrollContainer.scrollLeft += event.deltaY;
      }
    });
  }
</script>
