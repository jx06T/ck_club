---
interface TabItem {
  name: string;
  description: string;
  image: ImageMetadata;
}
interface Props {
  tabs: TabItem[];
  title: string;
  id?: string;
}
const { tabs, title, id } = Astro.props;
import { Image } from "astro:assets";
---

<section
  data-tabs-container
  class=" pt-6 /pb-6 md:pt-12 md:pb-10 px-4 sm:px-6 lg:px-8"
>
  <div class="grid md:grid-cols-[1.1fr_1fr] gap-12 lg:gap-14 xl:gap-24 h-full \min-h-[32rem]">
    <div class="relative hidden md:block">
      {
        tabs.map((tab, index) => (
          <div
            data-tab-panel={index}
            class:list={[
              "absolute inset-0 transition-opacity duration-300 ",
              { "opacity-100 z-10": index === 0 },
              { "opacity-0": index !== 0 },
            ]}
          >
            <Image
              src={tab.image}
              alt={tab.name}
              class="w-full object-cover rounded-lg  aspect-[3.5/4] xl:aspect-[4/3.5]"
            />
          </div>
        ))
      }
    </div>

    <div>
      <h1
        id={id}
        class="mb-4 block text-balance text-3xl lg:text-4xl font-bold tracking-tight"
      >
        {title}
      </h1>
      <div class="flex border-b border-primary-800 md:justify-start">
        {
          tabs.map((tab, index) => (
            <button
              data-tab-button={index}
              class:list={[
                "px-4 py-2 w-[33.4%] -mb-px font-semibold border-b-2 transition-colors text-lg",
                {
                  "tab-active": index === 0,
                  "border-transparent text-primary-800 hover:text-primary-600":
                    index !== 0,
                },
              ]}
            >
              {tab.name}
            </button>
          ))
        }
      </div>

      <div class="mt-4">
        {
          tabs.map((tab, index) => (
            <div
              data-tab-panel={index}
              class:list={[
                "transition-opacity duration-300",
                { "opacity-100": index === 0 },
                {
                  "opacity-0 h-0 overflow-hidden pointer-events-none":
                    index !== 0,
                },
              ]}
            >
              <div class="relative w-full aspect-[4/3.5] mb-4 md:hidden">
                <Image
                  src={tab.image}
                  alt={tab.name}
                  class="w-full h-full object-cover rounded-lg"
                />
              </div>
              <p class="text-primary-700 text-base ">{tab.description}</p>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const containers = document.querySelectorAll("[data-tabs-container]");

    containers.forEach((container) => {
      const buttons = container.querySelectorAll("[data-tab-button]");
      const panels = container.querySelectorAll("[data-tab-panel]");

      buttons.forEach((button) => {
        button.addEventListener("click", () => {
          const tabIndex = button.getAttribute("data-tab-button");

          buttons.forEach((btn) => {
            const btnIndex = btn.getAttribute("data-tab-button");
            btn.classList.toggle("tab-active", btnIndex === tabIndex);
            btn.classList.toggle("border-transparent", btnIndex !== tabIndex);
            btn.classList.toggle("text-primary-800", btnIndex !== tabIndex);
            btn.classList.toggle(
              "hover:text-primary-600",
              btnIndex !== tabIndex
            );
          });

          panels.forEach((panel) => {
            const panelIndex = panel.getAttribute("data-tab-panel");
            panel.classList.toggle("opacity-100", panelIndex === tabIndex);
            panel.classList.toggle("z-10", panelIndex === tabIndex);
            panel.classList.toggle("opacity-0", panelIndex !== tabIndex);
            panel.classList.toggle("h-0", panelIndex !== tabIndex);
            panel.classList.toggle("overflow-hidden", panelIndex !== tabIndex);
            panel.classList.toggle(
              "pointer-events-none",
              panelIndex !== tabIndex
            );
          });
        });
      });
    });
  });
</script>
